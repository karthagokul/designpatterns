#include <iostream>
#include <map>

using namespace std;

class Peripheral
{
    public:
    virtual void onBoot()=0;
};

class USBDevice: public Peripheral
{
    protected:
    void onBoot() final
    {
        cout<<"Booting USB Device"
    }
};

class SerialDevice:public Peripheral
{
    protected:
    void onBoot() final
    {


    }
};

class CPU
{
    std::map<Peripheral* > mObservers;
public:
    void addPeripheral(Peripheral *p)
    {
        mObservers.push_back(p);
    }
    void boot()
    {
        for(auto *obs:mObservers)obs->onBoot();
    }

};

int main()
{
    Peripheral *audioUSB=new Peripheral();
    Peripheral *monitor=new Peripheral();
    CPU myCpu;
    myCpu.addPeripheral(audioUSB);
    myCpu.addPeripheral(monitor);
    myCpu.boot();

    return 0;
}
